
### history, color, prompt, general, config
#
#
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize


# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'


    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi


# This chagnes the look of the bash command line.
export PS1="___________________    | \w @ \h (\u) \n| => "
export PS2="| => "

export VISUAL=vim
export EDITOR="$VISUAL"


# This command start tmux or screen and check if screen or tmux is running 
#if command -v tmux>/dev/null; then
#	[[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux
#fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi



set editor=vim


[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# keychain allow ssh-agen on all shell sessions 
eval `keychain --eval --agents ssh $HOME/.ssh/id_ed25519`


###### end

### alias and custom commands 

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ls='ls -alh'
alias dirs='dirs -v'
alias mutt='neomutt'
alias  lsblk='lsblk -e7'
alias rn='ranger'
alias root='ssh -l root'
alias me='ssh -l $USER'
# My custom alias for bash
alias pud='pushd'
alias pop='popd'
alias habbvpn='sudo openvpn $HOME/.cert/larsen-UDP4-1194-config.ovpn'
alias localhabbvpn='sudo openvpn $HOME/.cert/local-larsen-UDP4-1194-config.ovpn'
alias localpfbind='ssh -L 9000:localhost:10443 -p 1000 root@larsen.habbestad.org'
alias copy="xclip -sel c <"
alias df='df -x"squashfs"'
alias sftplinbast='sftp -o "ProxyCommand  connect -S hf-ssh-jump1.no.habbfarm.net" ebbestad@hf-linbast1.no.habbfarm.net'
alias mysql_infra='mysql --host mysql1.no.habbfarm.net --database infra  --user $USER --password'
alias butane='docker run --rm --interactive       \
              #--security-opt label=disable        \
              --volume ${PWD}:/pwd --workdir /pwd \
              quay.io/coreos/butane:release'
alias mkpasswd='docker run -ti --rm quay.io/coreos/mkpasswd --method=yescrypt'

#Den fÃ¸rste er for winbast, typ `remote 14` for winbast14 osv

remote () {
    if [ -z "$2" ]
    then
        rdesktop bf-winbast"$1".mgmt.basefarm.net -g 1920x1020 -k no -r clipboard:CLIPBOARD -r disk:mydisk=/home/$(whoami)/winbast
    else
        rdesktop bf-winbast"$1".mgmt.basefarm.net -g 2560x1400 -k no -r clipboard:CLIPBOARD -r disk:mydisk=/home/$(whoami)/winbast
    fi
}



home-ssh () {
    if [ -z "$1" ]
    then
        printf "Usage bastion-ssh [sth/ams]\n no is default\n"
        return 1
    elif [ -z "$2" ]
    then
        ssh linbast"$1".no.habbfarm.net
    else
        ssh linbast"$1".$2.habbfarm.net
    fi
}


gitconfig () {
  echo "Your username git"
  #read -sp "username"
  read  "username"
  git config user.name $username

  echo "Your email git"
  #read -sp "email"
  read  "email"
  git config user.email $email

  git config --system core.editor "vim"


}


## wip
mkp () {
echo "Ansible playbook name"
read  name
mkdir -p ${name}
mkdir -p group_vars
echo "Name of the role"
read rolename 
mkdir -p ${name}/roles/${rolename}/handlers/
mkdir -p ${name}/roles/${rolename}/task/
mkdir -p ${name}/roles/${rolename}/templates/
touch ${name}/hosts
touch ${name}/site.yml
touch ${name}/roles/${rolename}/handlers/main.yml
touch ${name}/roles/${rolename}/task/main.yml
}

# start kasmVNC server
startvnc () {
#vncserver -select-de xfce
vncserver -select-de mate
}
###


### paths for dirrent programs

# added by Anaconda3 installer
export PATH="$HOME/anaconda3/bin:$PATH"
export PATH=$PATH:$HOME/.local/bin/
export PATH=$PATH:$HOME/go/bin/

# check if .bin exist create if not and export
if [ -d .bin ]; then
    export PATH=$PATH:$HOME/.bin/
else 
    mkdir -p $HOME/.bin
fi



# perl fix
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/home/ebbestad/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)

PATH="/home/ebbestad/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/ebbestad/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/ebbestad/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/ebbestad/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/ebbestad/perl5"; export PERL_MM_OPT;
